#!/bin/bash
cd ./devops 
wget https://releases.hashicorp.com/terraform/0.14.9/terraform_0.14.9_linux_amd64.zip
unzip terraform_0.14.9_linux_amd64.zip
mv terraform /usr/local/bin

sudo apt-get install python-pip -y
sudo yum install epel-release -y
sudo yum install python3-pip.noarch -y

sudo python3 -m pip install awscli # RPM Distro installation of awscli via Pip.
sudo pip install awscli #deb Distro installation of awscli via pip
 
terraform init 
terraform plan 
terraform apply -auto-approve

sudo python3 -m pip install ansible # RPM Distro installation of ansible via pip
sudo pip install ansible # deb Distro installation of ansible by pip, will return error if on rpm distro.

sudo mkdir /etc/ansible # create Ansible configuration folder. (last resort for ansible, it first looks at ENV, Homefolder and current folder for configs) 
sudo touch /etc/ansible/hosts # Create hosts file if not existent, (because of PIP install ansible will be local to user, so we need to create it ) 
sudo echo "[ec2_instances]
`terraform output -raw instance_public_ip` ansible_user=ec2-user remote_user=ec2-user ansible_ssh_private_key_file=~/.ssh/thekey.pem" > /etc/ansible/hosts
# Here we add the IP Address and username + SSH key for the newly created EC2 Instance to the ansible hosts file, so we are able to connect to it. 

sudo chown `ls -ld ~/.ssh/ | awk '{print $3}'` ~/.ssh./thekey.pem # Because of Sudo/Root invocation the keyfile is now owned by root. We need to change this to the user that runs the script. Hence the inspecting of the home folder. 
sudo chgrp `ls -ld ~/.ssh/ | awk '{print $3}'` ~/.ssh./thekey.pem
sudo chmod 600 ~/.ssh/thekey.pem # Here we set the permissions for the keyfile to be only rw for the owner, to prevent security issues, and make it easier for ansible to work with the file. 
exit 0
