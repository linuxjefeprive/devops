#!/bin/bash
HOME=`sudo grep $(logname) /etc/passwd | awk -F: '{print $6}'` # Set HOME folder of user invoking the script.
PWD=$(pwd) # We want to set the folder the script is run from  as a variable, for later usage in the script.
USER=$(logname)
if (( $EUID != 0 )); then # Because our script requires root privileges we need to check if the script is run as root. If not, the script should fail. 
    echo "Please run this script as root. (sudo ./script)"
    exit 1
fi

 
wget https://releases.hashicorp.com/terraform/0.14.9/terraform_0.14.9_linux_amd64.zip   # Get the Terraform binary, in zip file
unzip terraform_0.14.9_linux_amd64.zip  # unzip the binary
mv terraform /usr/local/bin # place the binary in the usr/bin/ folder to have easy access. (/usr/local/bin is standard path for shell )

if [[ -f /usr/bin/apt ]]; then  # See if apt is installed, if so install pip and use pip to install ansible and awscli using debian commands. 
sudo apt-get install python3-pip -y
sudo python3 -m pip install awscli ansible 

elif [[ -f /usr/bin/yum ]]; then # If yum is installed instead of debian then use the yum commands to install pip, ansible and awscli. 
sudo yum install epel-release -y; sudo yum install python3-pip.noarch -y
sudo yum install python3-devel -yy # Required for building Python packages 
sudo yum groupinstall 'development tools' -yy # Required for building python packages
sudo python3 -m pip install --upgrade pip # Pip needs to be upgraded for RPM distro to build ansible. Dependency problem otherwise. 
sudo python3 -m pip install awscli ansible

else  # If none of the above package managers are installed, I can not guarantee the working of the script, so we fail. 
echo "Non .deb/.rpm distro detected, script not compatible"  
exit 1

fi 
 

/usr/local/bin/terraform init # using full path to binary because root on RPM does not include /usr/local/bin in PATH's  
/usr/local/bin/terraform plan 
/usr/local/bin/terraform apply -auto-approve

sudo mkdir /etc/ansible # create Ansible configuration folder. (last resort for ansible, it first looks at ENV, Homefolder and current folder for configs) 
sudo touch /etc/ansible/hosts # Create hosts file if not existent, (because of PIP install ansible will be local to user, so we need to create it ) 
sudo echo "[ec2_instances]
`/usr/local/bin/terraform output -raw instance_public_ip` ansible_user=ec2-user remote_user=ec2-user ansible_ssh_private_key_file=$HOME/.ssh/thekey.pem" > /etc/ansible/hosts
# Here we add the IP Address and username + SSH key for the newly created EC2 Instance to the ansible hosts file, so we are able to connect to it. 

sudo chown $USER $HOME/.ssh/thekey.pem # Because of Sudo/Root invocation the keyfile is now owned by root. We need to change this to the user that runs the script. 
sudo chgrp $USER $HOME/.ssh/thekey.pem # Set group to users group.
sudo chmod 600 $HOME/.ssh/thekey.pem # Here we set the permissions for the keyfile to be only rw for the owner, to prevent security issues, and make it easier for ansible to work with the file. 

echo " Sleeping for 30 seconds to give EC2 Instance time to properly initialize. (or ssh might not be ready) "

sleep 30s # Put the script to sleep for 0.5 minute 
ssh -o "StrictHostKeyChecking no" ec2-user@`/usr/local/bin/terraform output -raw instance_public_ip` #Here we add the remote key fingerprint for automation.

sleep 5s
/usr/local/bin/ansible-playbook playbook.yaml || $HOME/.local/bin/ansible-playbook playbook.yaml
 # Here we use Ansible to run our playbook, which is also compatible on RedHat as well as Debian Distro's. (And AWS Linux, very minimal).  
# The script uses the .local folder in your home when the first command fails, since pip in Ubuntu 20.04 installs there.
echo " going to sleep for 20 seconds before deploying post-install script "
sleep 20s 
/usr/local/bin/ansible-playbook post-install-rpm.yaml || $HOME/.local/bin/ansible-playbook post-install-rpm.yaml  
 # Here we use the post-install script only on RPM Distro's to configure the service to start, and optionally set firewall options

sleep 10s  # Here we deploy the playbook to obtain the Jenkins Password 
/usr/local/bin/ansible-playbook password.yaml  || $HOME/.local/bin/ansible-playbook password.yaml

echo " All done, browse to `/usr/local/bin/terraform output -raw instance_public_ip`:8080 to see the result. Password is `cat $PWD/initialAdminPassword` "

exit 0
